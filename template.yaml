AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: >
  globalchat-microservice

Parameters:
  ConnectionsTableParam:
    Type: String
    Default: 'globalchat_connections'
    Description: (Required) The name of the new DynamoDB to store connection identifiers for each connected clients. Minimum 3 characters
    MinLength: 3
    MaxLength: 50
    AllowedPattern: ^[A-Za-z_]+$
    ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'
  # MessagesTableParam:
  #  Type: String
  #  Default: 'climbingpartners_messages'
  #  Description: (Required) The name of the new DynamoDB to store messages. Minimum 3 characters
  #  MinLength: 3
  #  MaxLength: 50
  #  AllowedPattern: ^[A-Za-z_]+$
  #  ConstraintDescription: 'Required. Can be characters and underscore only. No numbers or special characters allowed.'

Resources:

  # define api gateway v2, route according to request.body.action
  GlobalChatWebSocket:
    Type: AWS::ApiGatewayV2::Api
    Properties:
      Name: GlobalChatWebSocket
      ProtocolType: WEBSOCKET
      RouteSelectionExpression: '$request.body.action'

  # for connect routekey, link to connection integration
  ConnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      RouteKey: $connect
      AuthorizationType: NONE
      OperationName: ConnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ConnectInteg

  # invoke connect lambda
  ConnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      Description: Connect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnConnectFunction.Arn}/invocations
  DisconnectRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      RouteKey: $disconnect
      AuthorizationType: NONE
      OperationName: DisconnectRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref DisconnectInteg
  DisconnectInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      Description: Disconnect Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${OnDisconnectFunction.Arn}/invocations
  SendRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      RouteKey: sendmessage
      AuthorizationType: NONE
      OperationName: SendRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref SendInteg
  SendInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      Description: Send Integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${SendMessageFunction.Arn}/invocations
  ChangeRoomRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      RouteKey: changeroom
      AuthorizationType: NONE
      OperationName: ChangeRoomRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref ChangeRoomInteg
  ChangeRoomInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      Description: Change Room integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${ChangeRoomFunction.Arn}/invocations
  GetRoomCountRoute:
    Type: AWS::ApiGatewayV2::Route
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      RouteKey: getroomcount
      AuthorizationType: NONE
      OperationName: GetRoomCountRoute
      Target: !Join
        - '/'
        - - 'integrations'
          - !Ref GetRoomCountInteg
  GetRoomCountInteg:
    Type: AWS::ApiGatewayV2::Integration
    Properties:
      ApiId: !Ref GlobalChatWebSocket
      Description: Get room count integration
      IntegrationType: AWS_PROXY
      IntegrationUri:
        Fn::Sub: arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${GetRoomCountFunction.Arn}/invocations
  Deployment:
    Type: AWS::ApiGatewayV2::Deployment
    DependsOn:
      - ConnectRoute
      - SendRoute
      - DisconnectRoute
    Properties:
      ApiId: !Ref GlobalChatWebSocket
  Stage:
    Type: AWS::ApiGatewayV2::Stage
    Properties:
      StageName: Staging
      Description: Staging Environment
      DeploymentId: !Ref Deployment
      ApiId: !Ref GlobalChatWebSocket
  
  # tables

  ConnectionsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      AttributeDefinitions:
        - AttributeName: 'connectionId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'connectionId'
          KeyType: 'HASH'
      ProvisionedThroughput:
        ReadCapacityUnits: 5
        WriteCapacityUnits: 5
      SSESpecification:
        SSEEnabled: True
      TableName: !Ref ConnectionsTableParam
  # MessagesTable:
  #   Type: AWS::DynamoDB::Table
  #   Properties:
  #     AttributeDefinitions:
  #       - AttributeName: 'chatId'
  #         AttributeType: 'S'
  #     KeySchema:
  #       - AttributeName: 'chatId'
  #         KeyType: 'HASH'
  #     ProvisionedThroughput:
  #       ReadCapacityUnits: 5
  #       WriteCapacityUnits: 5
  #     SSESpecification:
  #       SSEEnabled: True
  #     TableName: !Ref MessagesTableParam

  # websocket functions

  OnConnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: server/
      Handler: app.onConnect
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableParam
          # MESSAGES_TABLE_NAME: !Ref MessagesTableParam
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableParam
        # - DynamoDBCrudPolicy:
        #     TableName: !Ref MessagesTableParam
  OnConnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GlobalChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnConnectFunction
      Principal: apigateway.amazonaws.com
  OnDisconnectFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: server/
      Handler: app.onDisconnect
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableParam
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableParam
  OnDisconnectPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GlobalChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref OnDisconnectFunction
      Principal: apigateway.amazonaws.com
  SendMessageFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: server/
      Handler: app.sendMessage
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableParam
          # MESSAGES_TABLE_NAME: !Ref MessagesTableParam
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableParam
        # - DynamoDBCrudPolicy:
        #     TableName: !Ref MessagesTableParam
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GlobalChatWebSocket}/*'
  SendMessagePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GlobalChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref SendMessageFunction
      Principal: apigateway.amazonaws.com
  ChangeRoomFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: server/
      Handler: app.changeRoom
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableParam
          # MESSAGES_TABLE_NAME: !Ref MessagesTableParam
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableParam
        # - DynamoDBCrudPolicy:
        #     TableName: !Ref MessagesTableParam
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GlobalChatWebSocket}/*'
  ChangeRoomPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GlobalChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref ChangeRoomFunction
      Principal: apigateway.amazonaws.com
  GetRoomCountFunction:
    Type: AWS::Serverless::Function
    Properties:
      CodeUri: server/
      Handler: app.getRoomCount
      MemorySize: 256
      Runtime: nodejs12.x
      Environment:
        Variables:
          CONNECTIONS_TABLE_NAME: !Ref ConnectionsTableParam
          # MESSAGES_TABLE_NAME: !Ref MessagesTableParam
      Policies:
        - DynamoDBCrudPolicy:
            TableName: !Ref ConnectionsTableParam
        # - DynamoDBCrudPolicy:
        #     TableName: !Ref MessagesTableParam
        - Statement:
            - Effect: Allow
              Action:
                - 'execute-api:ManageConnections'
              Resource:
                - !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GlobalChatWebSocket}/*'
  GetRoomCountPermission:
    Type: AWS::Lambda::Permission
    DependsOn:
      - GlobalChatWebSocket
    Properties:
      Action: lambda:InvokeFunction
      FunctionName: !Ref GetRoomCountFunction
      Principal: apigateway.amazonaws.com

Outputs:
  ConnectionsTableArn:
    Description: 'Connections table ARN'
    Value: !GetAtt ConnectionsTable.Arn

  # MessagesTableArn:
  #   Description: 'Messages table ARN'
  #   Value: !GetAtt MessagesTable.Arn

  OnConnectFunctionArn:
    Description: 'OnConnect function ARN'
    Value: !GetAtt OnConnectFunction.Arn

  OnDisconnectFunctionArn:
    Description: 'OnDisconnect function ARN'
    Value: !GetAtt OnDisconnectFunction.Arn

  ChangeRoomFunctionArn:
    Description: 'ChangeRoom function ARN'
    Value: !GetAtt ChangeRoomFunction.Arn

  GetRoomCountFunctionArn:
    Description: 'GetRoomCount function ARN'
    Value: !GetAtt GetRoomCountFunction.Arn

  WebSocketURI:
    Description: 'The WSS Protocol URI to connect to'
    Value:
      !Join [
        '',
        [
          'wss://',
          !Ref GlobalChatWebSocket,
          '.execute-api.',
          !Ref 'AWS::Region',
          '.amazonaws.com/',
          !Ref 'Stage',
        ],
      ]
